# Cirrus CI instructions for building NSD
#
# These build instructions are based on the existing instructions and
# suggestions made by Jeffrey Walton (noloader) about using the Undefined
# Behavior sanitizer (UBSan) and the Address sanitizer (ASan).
#
# For now builds are limited to Linux, FreeBSD and macOS builds on AMD64, more
# may be added in the future.

ubuntu_2204_gcc11: &ubuntu_2204_gcc11
  container:
    image: ubuntu:jammy
  env:
    UBUNTU_CODENAME: jammy
    COV_COMPTYPE: gcc
    COV_PLATFORM: linux64
    CC: gcc-11
  bootstrap_script:
    - apt-get update
  install_script:
    - apt-get install -y autoconf automake libtool make gcc-11 clang libc-dev libevent-dev libssl-dev flex bison git

ubuntu_2204_clang14: &ubuntu_2204_clang14
  container:
    image: ubuntu:jammy
  env:
    UBUNTU_CODENAME: jammy
    CC: clang-14
    CLANG_VERSION: 14
  bootstrap_script:
    - apt-get update
  install_script:
    - apt-get install -y autoconf automake libtool make clang-${CLANG_VERSION} libc-dev libevent-dev libssl-dev flex bison git
    - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 10

freebsd_14_0: &freebsd_14_0
  freebsd_instance:
    image_family: freebsd-14-0
  env:
    CC: clang
  install_script:
    - pkg install --yes --quiet bash gmake autoconf automake libtool libevent git

macos_13_1_xcode14_2: &macos_13_1_xcode14_2
  macos_instance:
    image: ghcr.io/cirruslabs/macos-ventura-xcode:latest
  env:
    CC: clang
    COV_COMPTYPE: clang
    COV_COMPTYPE: macOSX
  install_script:
    - brew install bash autoconf automake libtool openssl libevent flex bison git

install_coverity: &install_coverity
  env:
    COV_ARC: "$CIRRUS_WORKING_DIR/cov-analysis-$COV_PLATFORM.tgz"
    COV_DIR: "$CIRRUS_WORKING_DIR/coverity-scan-analysis"
    PATH: "$PATH:$CIRRUS_WORKING_DIR/cov-analysis/bin"
  install_coverity_script:
    - test ! -d "${COV_DIR}" &&
      mkdir -p "${COV_DIR}" &&
      curl -s -S -F project="${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}"
                 -F token="${COVERITY_SCAN_TOKEN}"
                 -o "${COV_ARC}"
                 "https://scan.coverity.com/download/cxx/${COV_PLATFORM}" &&
      tar -xzf "${COV_ARC}" -C "${COV_DIR}"
    - ln -s $(find "${COV_DIR}" -type d -name "cov-analysis*") cov-analysis

submit_to_coverity_scan: &submit_to_coverity_scan
  submit_to_coverity_scan_script:
    - tar -czf analysis-results.tgz cov-int
    - curl -s -S -F project="${CIRRUS_REPO_OWNER}/${CIRRUS_REPO_NAME}"
                 -F token="${COVERITY_SCAN_TOKEN}"
                 -F file=@analysis-results.tgz
                 -F version="$(git rev-parse --short HEAD)"
                 -F description="Cirrus CI build"
                 -F email="${COVERITY_EMAIL:=spam@nlnetlabs.nl}"
                 "https://scan.coverity.com/builds"

env:
  COVERITY_EMAIL: ENCRYPTED[effa3340c97e8cf92c0dbb564187d35b6829580cc2577b176d6c6fc9b775745f7130c56f5bd9ab2472f4ae818b6f3791]
  COVERITY_SCAN_TOKEN: ENCRYPTED[8f67f850ca3d464ea87fa8dee17bbb0cfb2a991b6f401fd593fe0744eece838e325af438d62ee2d46c4e18a2bd5c873f]

task:
  only_if: $CIRRUS_CRON != ''
  name: "Build on Ubuntu 22.04 LTS with GCC 11 (Coverity Scan)"
  <<: *ubuntu_2204_gcc11
  <<: *install_coverity
  build_script:
    - autoconf && autoheader
    - libtoolize -c -i || glibtoolize -c -i
    - ./configure --enable-checking --disable-flto
    - cov-configure --comptype ${COV_COMPTYPE} --compiler ${CC} --template
    - cov-build --dir cov-int make
  <<: *submit_to_coverity_scan

task:
  matrix:
    - name: "Build and test on Ubuntu 22.04 LTS with GCC 11"
      <<: *ubuntu_2204_gcc11
    - name: "Build and test on Ubuntu 22.04 LTS with Clang 14 (ASan+UBSan+LSan)"
      <<: *ubuntu_2204_clang14
      env:
        CFLAGS: "-g2 -O0 -fsanitize=address,undefined,leak -fno-sanitize-recover=all"
    - name: "Build and test on FreeBSD 14.0 (ASan+UBSan)"
      <<: *freebsd_14_0
      env:
        CFLAGS: "-g2 -O0 -fsanitize=address,undefined -fno-sanitize-recover=all"
    - name: "Build and test on macOS 13.1 with Xcode 14.2 (ASan+UBSan)"
      <<: *macos_13_1_xcode14_2
      env:
        CFLAGS: "-g2 -O0 -fsanitize=address,undefined -fno-sanitize-recover=all"
        OPENSSL: "/opt/homebrew/opt/openssl@3"
        LIBEVENT: "/opt/homebrew/opt/libevent"

  build_script:
    - git submodule update --init
    - autoconf && autoheader
    - (cd simdzone && autoconf && autoheader)
    - libtoolize -c -i || glibtoolize -c -i
    - ./configure --enable-checking --disable-flto --with-ssl=${OPENSSL:-yes} --with-libevent=${LIBEVENT:-yes}
    - make -j 2
    - make cutest
    - ./cutest
    - (cd tpkg/clang-analysis.tdir && bash clang-analysis.test)
    - (cd tpkg && ./mini_tdir.sh -a ../.. exe checkconf.tdir)
