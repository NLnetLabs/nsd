# #-- catzones.test --#
# source the master var file when it's there
[ -f ../.tpkg.var.master ] && source ../.tpkg.var.master
# use .tpkg.var.test for in test variable passing
[ -f .tpkg.var.test ] && source .tpkg.var.test

. ../common.sh
PRE="../.."
TPKG_NSD_CONTROL="$PRE/nsd-control"
PRIMARY_CONTROL="$PRE/nsd-control -c primary.conf"
SECONDARY_CONTROL="$PRE/nsd-control -c secondary.conf"
SECONDARY2_CONTROL="$PRE/nsd-control -c secondary2.conf"
TPKG_NSD_CHECKCONF="$PRE/nsd-checkconf"
N_MEMBER_ZONES=256
SLEEP=""

n_zones() {
	$TPKG_NSD_CONTROL -c $1.conf zonestatus | grep ^zone: | wc -l
}

get_serial() {
	$1 zonestatus $2 \
	 | awk '/\(serial: /{s=substr($4,0,length($4)-1)}END{print s}'
}
get_n_members() {
	$1 zonestatus $2 \
	| awk '/\(serial: /{m=substr($7,0,length($7)-1)}END{print m}'
}
print_catzone_status() {
	CTRL="$TPKG_NSD_CONTROL -c $1.conf"
	echo "$1: `n_zones $1` zones"
	shift
	while [ $# -gt 0 ]
	do
		Z=$1.invalid
		S=`get_serial "$CTRL" $Z`
		M=`get_n_members "$CTRL" $Z`
		echo "	$1 (serial: $S, # members: $M)"
		shift
	done
	echo ""
}

print_status() {
	return
	echo "## $*"
	$SLEEP
	print_catzone_status primary catalog1 catalog2 catalog3
	print_catzone_status secondary catalog1
	print_catzone_status secondary2 catalog2
}


# Add some zones
#
for (( i = 0; i < $N_MEMBER_ZONES; i++))
do   echo zone${i}.invalid group$((${i} % 4))
done | $PRIMARY_CONTROL addzones >> nsd-control.log

# Add the second consumer by nsd-control addzone
#
$SECONDARY2_CONTROL addzone catalog2.invalid consumer

print_status "$N_MEMBER_ZONES member zones added"

for (( i = 0; i < $N_MEMBER_ZONES; i++))
do   echo zone${i}.invalid
done | $PRIMARY_CONTROL delzones >> nsd-control.log

print_status "$N_MEMBER_ZONES member zones deleted"

for (( i = 0; i < $N_MEMBER_ZONES; i++))
do   echo zone${i}.invalid group$((${i} % 4))
done | $PRIMARY_CONTROL addzones >> nsd-control.log

print_status "$N_MEMBER_ZONES member zones added"

for (( i = 0; i < $(( $N_MEMBER_ZONES / 4 )); i++))
do   echo zone${i}.invalid
done | $PRIMARY_CONTROL delzones >> nsd-control.log

print_status "$(($N_MEMBER_ZONES / 4)) member zones deleted"

for (( i = $(( $N_MEMBER_ZONES / 4 * 3 )); i < $(( $N_MEMBER_ZONES )); i++))
do   echo zone${i}.invalid
done | $PRIMARY_CONTROL delzones >> nsd-control.log

print_status "$(($N_MEMBER_ZONES / 4)) member zones deleted"
sleep .1

$PRIMARY_CONTROL write
wait_logfile primary.log "writing zone catalog1.invalid" 10
wait_logfile primary.log "writing zone catalog2.invalid" 10
CATALOG1_SERIAL=`awk 'FNR==2{print $NF}' primary.catalog1.invalid.zone`
CATALOG2_SERIAL=`awk 'FNR==2{print $NF}' primary.catalog2.invalid.zone`
CATALOG3_SERIAL=`awk 'FNR==2{print $NF}' primary.catalog3.invalid.zone`

wait_logfile secondary.log "zone catalog1.invalid. received update to serial $CATALOG1_SERIAL" 10
wait_logfile secondary2.log "zone catalog2.invalid. received update to serial $CATALOG2_SERIAL" 10


$SECONDARY_CONTROL write
wait_logfile secondary.log "writing zone catalog1.invalid" 10
$SECONDARY2_CONTROL write
wait_logfile secondary2.log "writing zone catalog2.invalid" 10

tail -n +3 primary.catalog1.invalid.zone > catalog1.invalid.zone.pri
tail -n +3 secondary.catalog1.invalid.zone > catalog1.invalid.zone.sec
if ! diff catalog1.invalid.zone.pri catalog1.invalid.zone.sec ; then
	>&2 echo "catalog1.invalid differs between primary and secondary"
	exit 1
fi

tail -n +3 primary.catalog2.invalid.zone > catalog2.invalid.zone.pri
tail -n +3 secondary2.catalog2.invalid.zone > catalog2.invalid.zone.sec2
if ! diff catalog2.invalid.zone.pri catalog2.invalid.zone.sec2 ; then
	>&2 echo "catalog2.invalid differs between primary and secondary"
	exit 1
fi

print_status "Final stats"

if [ `n_zones primary` -ne $(( $N_MEMBER_ZONES / 2 + 3 )) ]; then
	>&2 echo "primary has wrong number of zones"
	exit 1
fi
if [ `n_zones secondary` -ne $(( $N_MEMBER_ZONES / 4 + 1 )) ]; then
	>&2 echo "secondary has wrong number of zones"
	exit 1
fi
if [ `n_zones secondary2` -ne $(( $N_MEMBER_ZONES / 8 + 1 )) ]; then
	>&2 echo "secondary2 has wrong number of zones"
	exit 1
fi

CAT1="catalog producer zones cannot be secondary zones"
CAT2="catalog-producer-zone option can only be used in patterns not zones"
CAT3="catalog-producer-zone could not be found"
CAT4="catalog-producer-zone is not configured as a catalog producer"
for TEST in 1.1 1.2 1.3 1.4 2.1 2.2 3 4; do
	if $TPKG_NSD_CHECKCONF catzones.bad${TEST}.conf 2>/dev/null; then
		eval echo Failed test $TEST in category '\"'\$CAT${TEST%.*}'\"'
		exit 1
	fi
done

cp primary.conf primary.conf.bak
sed -i.orig1 's/-zone: "catalog2.invalid"/-zone: "catalog3.invalid"/' primary.conf
if $PRIMARY_CONTROL reconfig | tail -1 | grep '^ok$'; then
	echo "Should not be able to change catalog producer member zones"
	exit 1
fi

cp primary.conf.bak primary.conf
sed -i.orig2 's/catalog-producer-zone: "catalog2.invalid"//' primary.conf
if $PRIMARY_CONTROL reconfig | tail -1 | grep '^ok$'; then
	echo "Should not be able to remove catalog producer member zones"
	exit 1
fi

cp primary.conf.bak primary.conf
cat << EOF >> primary.conf
pattern:
	name: "group4"
	include-pattern: "primary"
	zonefile: "catzones.primary.group4.zone"
	catalog-producer-zone: "catalog2.invalid"

pattern:
	name: "group5"
	include-pattern: "primary"
	zonefile: "catzones.primary.group5.zone"
	#catalog-producer-zone: "catalog3.invalid"
EOF
if ! $PRIMARY_CONTROL reconfig | tail -1 | grep '^ok$'; then
	echo "It should be fine to add new catalog member zone patterns"
	# Because there wouldn't be any zones configured with it anyway
	exit 1
fi

cp primary.conf primary.conf.bak
sed -i.orig3 's/#catalog-producer-zone:/catalog-producer-zone:/' primary.conf
if $PRIMARY_CONTROL reconfig | tail -1 | grep '^ok$'; then
	echo "An existing pattern may not become cat producer member zone pat"
	exit 1
fi

cp primary.conf.bak primary.conf
if ! $PRIMARY_CONTROL reconfig | tail -1 | grep '^ok$'; then
	echo "All previous errors should have had no effect"
	exit 1
fi

# More than one consumer is invalid
$SECONDARY2_CONTROL addzone catalog3.invalid consumer
wait_logfile secondary2.log "catalog3.invalid serial 0 is updated to $CATALOG3_SERIAL" 10

for (( i = 0; i < $(( $N_MEMBER_ZONES / 4 )); i++))
do   echo zone${i}.invalid group$((${i} % 4))
done | $PRIMARY_CONTROL addzones >> nsd-control.log

for (( i = $(( $N_MEMBER_ZONES / 4 * 3 )); i < $(( $N_MEMBER_ZONES )); i++))
do   echo zone${i}.invalid group$((${i} % 4))
done | $PRIMARY_CONTROL addzones >> nsd-control.log

CATALOG2_SERIAL=`get_serial "$PRIMARY_CONTROL" catalog2.invalid`
CATALOG3_SERIAL=`get_serial "$PRIMARY_CONTROL" catalog3.invalid`

wait_logfile secondary2.log " is updated to $CATALOG3_SERIAL" 10

if [ `n_zones secondary2` -ne $(( $N_MEMBER_ZONES / 8 + 2 )) ]; then
	>&2 echo "secondary2 should not process and has wrong number of zones"
	exit 1
fi

$SECONDARY2_CONTROL delzone catalog3.invalid
wait_logfile secondary2.log "catalog2.invalid serial is updated to $CATALOG2_SERIAL" 10

if [ `n_zones secondary2` -ne $(( $N_MEMBER_ZONES / 4 + 1 )) ]; then
	>&2 echo "secondary2 should be processing again"
	exit 1
fi

$SECONDARY2_CONTROL addzone catalog3.invalid consumer
$SECONDARY2_CONTROL delzone catalog2.invalid
wait_logfile secondary2.log "catalog3.invalid serial 0 is updated to $CATALOG3_SERIAL" 10

if [ `n_zones secondary2` -ne $(( $N_MEMBER_ZONES / 4 + 1 )) ]; then
	>&2 echo "secondary2 should be processing again and have $(( $N_MEMBER_ZONES / 4 + 1)) zones"
	exit 1
fi

wait_logfile secondary2.log "zone zone3.invalid serial 0 is updated to 1" 10
if ! dig @127.0.0.1 -p $SECONDARY2_PORT zone3.invalid TXT +norec +short | grep group3
then
	>&2 echo "Consumer member zone should be loaded and served"
	exit 1
fi

if $SECONDARY2_CONTROL delzone zone3.invalid | tail -1 | grep '^ok$'; then
	echo "A consumer member zone cannot be deleted with nsd-control delzone"
	# But must be deleted from the catalog
	exit 1
fi

exit 0

